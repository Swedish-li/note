{"version":3,"sources":["webpack:///../src/javascript/regexp-test-behavior-with-function.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAQaA,G,UAAe,S,uOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,yBADR,yBAGA,qBAAG,iBAAGC,WAAW,IACb,KAAQ,8FADT,kDAGH,yCAAwB,iBAAGA,WAAW,IAClC,KAAQ,6DADY,iCAAxB,aAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,0FAQL,sBACE,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,4DAEF,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,6CAOL,qBAAG,0BAAYA,WAAW,KAAvB,kCAAH,yC,qOAKJJ,EAAWK,gBAAiB","file":"component---src-javascript-regexp-test-behavior-with-function-mdx-ed7036ad892fb4021fb6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/note/note/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"正则表达式的test方法参数为函数时的行为\"\n    }}>{`正则表达式的test方法参数为函数时的行为`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/questions/19779993/javascript-regexp-test-behavior-with-function\"\n      }}>{`Javascript regexp test behavior with function`}</a></p>\n    <p>{`John Resig 在他的文章 `}<a parentName=\"p\" {...{\n        \"href\": \"https://johnresig.com/blog/simple-javascript-inheritance/\"\n      }}>{`Simple JavaScript Inheritance`}</a>{` 中出现了如下代码`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var fnTest = /xyz/.test(function() {\n    xyz\n})\n    ? /\\\\b_super\\\\b/\n    : /.*/\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\">{`由于正则表达式的 test 方法只能处理字符串参数，如果这个参数不为字符串会被强制转换为字符串。`}</li>\n      <li parentName=\"ol\">{`函数的字符串表示形式通常为这个函数的函数体，内置函数通常会返回下了形式的字符串(并不是所有的时候都会是这样)。`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function pow() {\n  [native code]\n}\n\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`/xyz/.test(function() { xyz })`}</inlineCode>{` 这段代码的目的是校验浏览器返回函数的字符串表示是否为函数体。`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}